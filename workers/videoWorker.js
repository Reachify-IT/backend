require("dotenv").config();
const { Queue, Worker } = require("bullmq");
const Redis = require("ioredis");
const path = require("path");
const os = require("os");
const fs = require("fs");

const processExcel = require("../utils/processExcel");
const recordWebsite = require("../utils/recordWebsite");
const mergeVideos = require("../utils/mergeVideos");
const uploadToS3 = require("../utils/uploadToS3");
const Video = require("../models/Video");

const maxConcurrency = os.cpus().length - 1;

// ‚úÖ Redis Connection
const redisConnection = new Redis(process.env.REDIS_URL, {
  tls: { rejectUnauthorized: false },
  maxRetriesPerRequest: null,
});

// ‚úÖ BullMQ Queue
const videoQueue = new Queue("videoProcessing", {
  connection: redisConnection,
});

// ‚úÖ Function to delete a file
const deleteFile = (filePath) => {
  fs.unlink(filePath, (err) => {
    if (err) {
      console.error(`‚ùå Error deleting file ${filePath}:`, err);
    } else {
      console.log(`üóëÔ∏è Deleted file: ${filePath}`);
    }
  });
};

const videoWorker = new Worker(
  "videoProcessing",
  async (job) => {
    const startTime = Date.now();
    console.log(`Processing job ${job.id}...`);

    const { excelPath, camVideoPath, userId } = job.data;

    if (!userId) {
      throw new Error("‚ùå Missing userId in job data.");
    }

    console.log(`üîç Processing Excel File: ${excelPath}`);
    const websiteUrls = processExcel(excelPath);
    if (websiteUrls.length === 0) {
      throw new Error("‚ùå No valid URLs found in the Excel file");
    }

    const outputDir = path.join(__dirname, "../uploads/");
    const recordedVideos = [];

    for (const webUrl of websiteUrls) {
      console.log(`üé• Recording website: ${webUrl}`);
      const recordedVideoPath = await recordWebsite(webUrl, outputDir);
      recordedVideos.push({ webUrl, path: recordedVideoPath });
    }

    console.log("‚úÖ All websites recorded successfully:", recordedVideos);

    const mergedVideos = [];

    for (const { webUrl, path: webVideo } of recordedVideos) {
      const outputFilePath = `./uploads/merged_${Date.now()}.mp4`;

      console.log("üîÑ Merging videos...");
      await mergeVideos(webVideo, camVideoPath, outputFilePath);

      console.log("‚òÅÔ∏è Uploading to S3...");
      const fileName = `merged_${Date.now()}.mp4`;
      const s3Url = await uploadToS3(outputFilePath, fileName);

      console.log(`‚úÖ Video uploaded to S3: ${s3Url}`);

      // Push the URL to the array
      mergedVideos.push(s3Url);

      // ‚úÖ Delete local files after processing
      deleteFile(webVideo);
      deleteFile(outputFilePath);
    }

    // ‚úÖ Delete the uploaded Excel file and Camera Video after processing
    deleteFile(excelPath);
    deleteFile(camVideoPath);

    // ‚úÖ After processing all videos, save to MongoDB in a single operation
    if (mergedVideos.length > 0) {
      try {
        const newVideo = await Video.create({
          userId,
          mergedUrls: mergedVideos, // Saving all merged video URLs as an array
        });

        console.log("‚úÖ Video details saved in DB!", newVideo);
      } catch (dbError) {
        console.error("‚ùå MongoDB Save Error:", dbError);
      }
    } else {
      console.warn("‚ö†Ô∏è No videos were processed. Skipping DB save.");
    }

    const endTime = Date.now();
    console.log(
      `‚úÖ Job ${job.id} completed in ${(endTime - startTime) / 1000} seconds`
    );

    return mergedVideos;
  },
  { connection: redisConnection, concurrency: maxConcurrency }
);

// ‚úÖ Job Status Listeners
videoWorker.on("active", (job) =>
  console.log(`üöÄ Job ${job.id} is now being processed`)
);
videoWorker.on("completed", (job) =>
  console.log(`‚úÖ Job ${job.id} completed:`, job.returnvalue)
);
videoWorker.on("failed", (job, err) =>
  console.error(`‚ùå Job ${job.id} failed:`, err)
);

// ‚úÖ Redis Event Listeners
redisConnection.on("connect", () => console.log("‚úÖ Redis connected!"));
redisConnection.on("error", (err) =>
  console.error("‚ùå Redis connection error:", err)
);

module.exports = { videoQueue, videoWorker };
